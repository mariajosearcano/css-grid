/*las grillas de CSS(grids) solo tratan de crear un marco invisible para los objetos*/

.grid {
    display: grid;
    /*grid-template-columns: 200px 200px 400px;
    grid-template-rows: auto 100px;
    /*auto: se ajusta a las lo que contiene*/
    /*gap: 1em; /*gap: espaciado entre objetos(filas y columnas)*/
    /*column-gap: 1em; solo espaciado entre columnas*/
    /*row-gap: 1em;*/ /*solo espaciado entre filas*/
    /*grid-template-columns: 1fr 1fr 1fr 1fr; /*1fr: una fracion, intentara fracionarlo todo de manera que ocupe toda la pantalla*/
    grid-template-columns: repeat(3, 1fr); /*repeat(): repetir algo una cantidad de veces*/
    gap: 1em;
    grid-auto-rows: minmax(100px, auto); /*minmax: valor minimo y maximo a tomar. No importa que tenga dentro el tama;o sera esos*/

    /*justify-items: start; start: elementos al inicio del espaciado
    center: mitad
    end: final
    stretch: estado normal(abarcar todo el ancho posible del espaciado que mantienen)*/
    /*align-items: center; lo mismo que justify pero vertical*/
    align-items: stretch;
}

/*.nested-grid { nested-grid: grid anidado
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: 100px; /*grid-auto-rows: espaciado dentro*/
    /*gap: 1em;
}

.nested-grid > div {
    border: 1px solid #000;
    background: #f1c40f;
    padding: 1em;
}*/

/*.element1 {
    align-self: start;
}

.element2 {
    align-self: center;
}

.element3 {
    align-self: end;
}

.element4 {
    justify-self: start;
}

.element5 {
    justify-self: center;
}

.element6 {
    justify-self: end;
}*/

.element1 {
    grid-column: 1/4; /*de la linea 1 a la x y ocupara ese espacio*/
    grid-row: 1/3;
}

.element2 {
    grid-column: 1/2;
}

.element3 {
    grid-column: 2/4;
}

.grid > div {
    background: #ecf0f1;
    padding: 1em;
}

.grid > div:hover/*hover es una clase*/ {
    border: 1px solid #f1c40f;
}
